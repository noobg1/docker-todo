{"src/index.js":{"hash":"68df7e9513330111b72dbed04b98ae57","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/index.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'IndexRoute' is defined but never used.","line":4,"column":25,"nodeType":"Identifier","source":"import { Router, Route, IndexRoute, hashHistory } from 'react-router'"}],"errorCount":0,"warningCount":1,"source":"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { Router, Route, IndexRoute, hashHistory } from 'react-router'\n\nReactDOM.render(\n      <Router history={hashHistory}>\n        <Route path='/(:filter)' component={App} />\n      </Router>,\n  document.getElementById('root')\n)\n"}],"errorCount":0,"warningCount":1}},"src/App.js":{"hash":"794a4a7edd868c12bfd237952f36e8e5","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/App.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}},"src/Container.jsx":{"hash":"e44a921ff860b655d87675bfa65b43b4","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/Container.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Apicalls' is defined but never used.","line":4,"column":8,"nodeType":"Identifier","source":"import Apicalls from './Apicalls.js'"},{"ruleId":"no-useless-escape","severity":1,"message":"Unnecessary escape character: \\/.","line":23,"column":67,"nodeType":"Literal","source":"    this.escapeHtml = (string) => String(string).replace(/[&<>\"'`=\\/]/g, s => this.entityMap[s])"}],"errorCount":0,"warningCount":2,"source":"import React, { Component } from 'react'\nimport TodoList from './TodoList.jsx'\nimport axios from 'axios'\nimport Apicalls from './Apicalls.js'\nimport qs from 'qs'\nimport Footer from './Footer.jsx'\nimport { getActiveItems } from './helperFunctions.js'\n\nclass Container extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { checkAll: true, todos: [] }\n    this.entityMap = {\n      '&': '&amp;',\n      '<': '&lt;',\n      '>': '&gt;',\n      '\"': '&quot;',\n      '\\'': '&#39;',\n      '/': '&#x2F;',\n      '`': '&#x60;',\n      '=': '&#x3D;'\n    }\n    this.escapeHtml = (string) => String(string).replace(/[&<>\"'`=\\/]/g, s => this.entityMap[s])\n  }\n  addItem(newTodoDescription) {\n    axios.post(`http://localhost:8001/api/write/${this.escapeHtml(newTodoDescription)}`)\n      .then((response) => {\n        let newTodo = {\n          id: response.data.id,\n          status: false,\n          description: newTodoDescription\n        }\n        this.setState((oldState => {\n          oldState.todos[newTodo.id] = newTodo\n        }))\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n  toggleCheckAll(status) {\n    let todosList = this.state.todos\n    this.setState((oldState) => {\n      oldState.checkAll = !this.state.checkAll\n    })\n    let tempTodos = []\n    todosList.forEach((todo) => {\n      let newTodo = {\n        id: todo.id,\n        status: this.state.checkAll,\n        description: todo.description\n      }\n      tempTodos[newTodo.id] = newTodo\n      this.updateTodo(newTodo, newTodo.description, newTodo.status)\n    })\n    this.setState((oldState) => {\n      oldState.todos = tempTodos\n    })\n  }\n  componentDidMount() {\n    axios.get('http://localhost:8001/api/read/')\n      .then((response) => {\n        let todoObjects = response.data\n        let tempTodos = []\n        todoObjects.forEach((todo) => {\n          tempTodos[todo.id] = todo\n        })\n        this.setState((oldState) => {\n          oldState.todos = tempTodos\n        })\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n\n  updateTodo(todo, updatedDesciption, status) {\n    let toUpdate = {\n      task: this.escapeHtml(updatedDesciption),\n      status: status\n    }\n    axios.put(`http://localhost:8001/api/update/${todo.id}`, qs.stringify(toUpdate))\n      .then((response) => {\n        todo.status = status\n        todo.description = updatedDesciption\n        this.setState((oldState) => {\n          oldState.todos[todo.id] = todo\n        })\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n\n  destroyTodo(todo) {\n    axios.delete(`http://localhost:8001/api/delete/${todo.id}`)\n      .then((response) => {\n        this.setState((oldState) => {\n          console.log(oldState.todos[todo.id])\n          delete oldState.todos[todo.id]\n        })\n      })\n      .catch(function (error) {\n        console.log(error)\n      })\n  }\n  clearCompleted() {\n    this.state.todos.forEach((todo) => {\n      if (todo.status) {\n        this.destroyTodo(todo)\n      }\n    })\n  }\n\n  render() {\n    let currentTodos = []\n    const currentUrl = this.props.filter\n    // console.log('1', this.props.filter)\n    switch (currentUrl) {\n    case 'All':\n      currentTodos = this.state.todos\n      break\n    case 'Active':\n      currentTodos = this.state.todos.filter((item) => item.status === false)\n      break\n    case 'Completed':\n      currentTodos = this.state.todos.filter((item) => item.status === true)\n      break\n    default:   \n      currentTodos = this.state.todos\n      break\n    }\n    let footer = ''\n    if (this.state.todos.length > 0) {\n      footer = <Footer activeItems={getActiveItems(this.state.todos)} clearCompleted={this.clearCompleted.bind(this)} />\n    }\n    return (\n      <div >\n        <Input addItem={this.addItem.bind(this)} toggleCheckAll={this.toggleCheckAll.bind(this)} className=\"toggle-all\" />\n        <TodoList todos={currentTodos} updateTodo={this.updateTodo.bind(this)} destroyTodo={this.destroyTodo.bind(this)} />\n        {footer}\n      </div>\n    )\n  }\n}\n\nclass Input extends Component {\n  addItem(e) {\n    if (e.key === 'Enter') {\n      this.props.addItem(e.target.value)\n      this.refs.newTodo.value = ''\n    }\n  }\n  toggleStatus() {\n    this.props.toggleCheckAll()\n  }\n  render() {\n\n    return (\n      <div>\n        <input classID=\"id-new-todo\" ref=\"newTodo\" className=\"new-todo\" placeholder=\"What needs to be done?\" autoFocus onKeyPress={this.addItem.bind(this)} />\n        <input className=\"toggle-all\" type=\"checkbox\" onClick={this.toggleStatus.bind(this)} />\n        <label htmlFor=\"toggle-all\">Mark all as complete</label>\n      </div>\n    )\n  }\n\n}\n\nexport default Container"}],"errorCount":0,"warningCount":2}},"src/TodoList.jsx":{"hash":"eff298406b5dc79a3aec8d3b525d2788","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/TodoList.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Component' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","source":"import React, { Component } from 'react'"},{"ruleId":"no-lone-blocks","severity":1,"message":"Nested block is redundant.","line":12,"column":3,"nodeType":"BlockStatement","source":"  {console.log('here')}"}],"errorCount":0,"warningCount":2,"source":"import React, { Component } from 'react'\nimport Todo from './Todo.jsx'\n\nconst TodoList = (props) => {\n  const mainSection = {\n    display: 'block'\n  }\n\n  let todos = props.todos.map((todo) => {\n    return <Todo key={todo.id} todo={todo} updateTodo={props.updateTodo} destroyTodo={props.destroyTodo}/>\n  })\n  {console.log('here')}\n  return (\n    <section className=\"main\" style={mainSection}>\n      <ul classID=\"id-todo-list\" className=\"todo-list\">\n          {todos} \n      </ul>\n    </section>\n  )\n}\n\nexport default TodoList"}],"errorCount":0,"warningCount":2}},"src/Todo.jsx":{"hash":"4440c62aedc6cd01d2774559fd011291","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/Todo.jsx","messages":[{"ruleId":"no-template-curly-in-string","severity":1,"message":"Unexpected template string expression.","line":46,"column":23,"nodeType":"Literal","source":"        <li className=\"${status} \">"}],"errorCount":0,"warningCount":1,"source":"import React, { Component } from 'react'\n\nclass Todo extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      showLabel: true,\n      value: this.props.todo.description\n    }\n  }\n  componentWillReceiveProps(nextProps) {\n    this.setState((oldState) => {\n      oldState.value = this.props.todo.description\n    })\n  }\n  showInput() {\n    this.setState((oldState) => {\n      oldState.showLabel = !oldState.showLabel\n    })\n  }\n  updateTodo(e) {\n    e.persist()\n    if (e.key === 'Enter') {\n      this.setState((oldState) => {\n        oldState.value = e.target.value\n      })\n      this.showInput()\n      this.props.updateTodo(this.props.todo, e.target.value, !this.state.status)\n    }\n  }\n  updateTodoStatus(e) {\n    this.setState((oldState) => {\n      oldState.status = !oldState.status\n      this.props.updateTodo(this.props.todo, this.state.value, oldState.status)\n    })\n  }\n\n  destroyTodo () {\n    this.props.destroyTodo(this.props.todo)\n  }\n  \n  render() {\n    const fadeStyleTodo = (this.props.todo.status) ? 'active' : 'completed'\n    return (\n      <div>\n        <li className=\"${status} \">\n          <div className=\"view\">\n            \n            {\n              this.state.showLabel ? \n              <div> \n                <input className=\"checkbox toggle\" type=\"checkbox\" name=\"checkbox\" checked={this.props.todo.status} onChange={this.updateTodoStatus.bind(this)} />\n                <label onDoubleClick={this.showInput.bind(this)} className={fadeStyleTodo}>{this.state.value}</label> \n                <button className=\"destroy\" onClick={this.destroyTodo.bind(this)}></button>\n              </div> : \n              <input className=\"edit\" type=\"text\" defaultValue={this.state.value} onKeyPress={this.updateTodo.bind(this)} />\n            }\n          </div>\n        </li>\n      </div>\n    )\n  }\n}\n\n\n\nexport default Todo"}],"errorCount":0,"warningCount":1}},"src/Apicalls.js":{"hash":"b27f5b70e6ba11169247034e9ea1a68a","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/Apicalls.js","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'dataObject' is assigned a value but never used.","line":4,"column":7,"nodeType":"Identifier","source":"  let dataObject;"}],"errorCount":0,"warningCount":1,"source":"import $ from 'jquery'\n\nconst read = function (callback = () => {}) {\n  let dataObject;\n  return $.get('http://localhost:8001/api/read/', (data) => {\n    dataObject = data;\n  })\n  // .done(function () {\n  //   console.log(dataObject)\n  //   callback(null, dataObject, `Todo items loaded`)\n  //   return dataObject;\n  // }).fail(function () {\n  //   callback('Failed to load todo items', null)\n  // })\n}\n\nmodule.exports = {read}"}],"errorCount":0,"warningCount":1}},"src/Footer.jsx":{"hash":"9fd36317eb58746b277f02cfccf51f94","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/Footer.jsx","messages":[{"ruleId":"no-unused-vars","severity":1,"message":"'Component' is defined but never used.","line":1,"column":17,"nodeType":"Identifier","source":"import React, { Component } from 'react'"},{"ruleId":"no-unused-vars","severity":1,"message":"'updateFocusCss' is assigned a value but never used.","line":7,"column":7,"nodeType":"Identifier","source":"  let updateFocusCss = ''"}],"errorCount":0,"warningCount":2,"source":"import React, { Component } from 'react'\nimport { Link } from 'react-router'\n\nconst Footer = (props) => {\n  let activeItems = props.activeItems\n  let message\n  let updateFocusCss = ''\n  if (activeItems === 1) {\n    message = `${activeItems} item left`\n  }\n  else {\n    message = `${activeItems} items left`\n  }\n  function clearCompleted() {\n    props.clearCompleted()\n  }\n  function updateFocus (e) {\n    console.log('focus',e.target.classid)\n  }\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">{message}</span>\n      <ul className=\"filters\">\n        <li onClick={updateFocus}>\n          <Link classID=\"all\" to=\"/\" className=\"\">All</Link>\n        </li>\n        <li onClick={updateFocus}>\n          <Link classID=\"active\" to=\"/Active\">Active</Link>\n        </li>\n        <li onClick={updateFocus}>\n          <Link classID=\"completed\" to=\"/Completed\">Completed</Link>\n        </li>\n      </ul>\n      <button classID=\"clear-completed-id\" className=\"clear-completed\" onClick={clearCompleted}>Clear completed</button>\n    </footer>\n  )\n}\n\nexport default Footer"}],"errorCount":0,"warningCount":2}},"src/helperFunctions.js":{"hash":"d10c3276ca945bd32aec67ad0b916468","res":{"results":[{"filePath":"/Users/jeevanndc/labs/tuts/reactPractice/todoApp/src/helperFunctions.js","messages":[],"errorCount":0,"warningCount":0}],"errorCount":0,"warningCount":0}}}